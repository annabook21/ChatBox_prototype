Resources:
  knowledgeBaseRoleEEC71BA3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount:
                  Ref: AWS::AccountId
              ArnLike:
                aws:SourceArn:
                  Fn::Join:
                    - ""
                    - - "arn:"
                      - Ref: AWS::Partition
                      - ":bedrock:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :knowledge-base/*
            Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Ref: knowledgeBaseKBVectorsAOSSApiAccessAll053431A3
      RoleName: AmazonBedrockExecutionRoleForKnowledgeBaseBackenddgeBase80E07476
    Metadata:
      aws:cdk:path: BackendStack/knowledgeBase/Role/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: The KB role needs read only access to all objects in the data source bucket.
            id: AwsSolutions-IAM5
  knowledgeBaseRoleDefaultPolicy372C7B66:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: bedrock:InvokeModel
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":bedrock:"
                  - Ref: AWS::Region
                  - ::foundation-model/amazon.titan-embed-text-v1
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: knowledgeBaseRoleDefaultPolicy372C7B66
      Roles:
        - Ref: knowledgeBaseRoleEEC71BA3
    Metadata:
      aws:cdk:path: BackendStack/knowledgeBase/Role/DefaultPolicy/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: The KB role needs read only access to all objects in the data source bucket.
            id: AwsSolutions-IAM5
  knowledgeBaseKBVectorsEncryptionPolicyBA827C55:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: encryptionpolicybacktors1fc1218c
      Policy: '{"Rules":[{"ResourceType":"collection","Resource":["collection/vectorstorebackenectors1fc1218c"]}],"AWSOwnedKey":true}'
      Type: encryption
    Metadata:
      aws:cdk:path: BackendStack/knowledgeBase/KBVectors/EncryptionPolicy
  knowledgeBaseKBVectorsNetworkPolicyB1FE9A28:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: networkpolicybackectors1fc1218c
      Policy: '[{"Rules":[{"ResourceType":"collection","Resource":["collection/vectorstorebackenectors1fc1218c"]},{"ResourceType":"dashboard","Resource":["collection/vectorstorebackenectors1fc1218c"]}],"AllowFromPublic":true}]'
      Type: network
    Metadata:
      aws:cdk:path: BackendStack/knowledgeBase/KBVectors/NetworkPolicy
  knowledgeBaseKBVectorsVectorCollectionD6F54897:
    Type: AWS::OpenSearchServerless::Collection
    Properties:
      Name: vectorstorebackenectors1fc1218c
      StandbyReplicas: ENABLED
      Tags:
        - Key: Name
          Value: vectorstorebackenectors1fc1218c
        - Key: Type
          Value: VectorCollection
      Type: VECTORSEARCH
    DependsOn:
      - knowledgeBaseKBVectorsEncryptionPolicyBA827C55
      - knowledgeBaseKBVectorsNetworkPolicyB1FE9A28
    Metadata:
      aws:cdk:path: BackendStack/knowledgeBase/KBVectors/VectorCollection
  knowledgeBaseKBVectorsAOSSApiAccessAll053431A3:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: ""
      Path: /
      PolicyDocument:
        Statement:
          - Action: aoss:APIAccessAll
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - knowledgeBaseKBVectorsVectorCollectionD6F54897
                - Arn
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: BackendStack/knowledgeBase/KBVectors/AOSSApiAccessAll/Resource
  knowledgeBaseKBVectorsDataAccessPolicy4F5904A6:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Properties:
      Name: dataaccesspolicybacktors1fc1218c
      Policy:
        Fn::Join:
          - ""
          - - '[{"Rules":[{"Resource":["collection/vectorstorebackenectors1fc1218c"],"Permission":["aoss:DescribeCollectionItems","aoss:CreateCollectionItems","aoss:UpdateCollectionItems"],"ResourceType":"collection"},{"Resource":["index/vectorstorebackenectors1fc1218c/*"],"Permission":["aoss:UpdateIndex","aoss:DescribeIndex","aoss:ReadDocument","aoss:WriteDocument","aoss:CreateIndex"],"ResourceType":"index"}],"Principal":["'
            - Fn::GetAtt:
                - knowledgeBaseRoleEEC71BA3
                - Arn
            - '"],"Description":""}]'
      Type: data
    Metadata:
      aws:cdk:path: BackendStack/knowledgeBase/KBVectors/DataAccessPolicy
    Condition: knowledgeBaseKBVectorsIsDataAccessPolicyNotEmpty41B43429
  knowledgeBaseKBIndexManageIndexPolicy2C498A7C:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Properties:
      Name: manageindexpolicybacdex3572e59b
      Policy:
        Fn::Join:
          - ""
          - - '[{"Rules":[{"Resource":["index/vectorstorebackenectors1fc1218c/*"],"Permission":["aoss:DescribeIndex","aoss:CreateIndex","aoss:DeleteIndex","aoss:UpdateIndex"],"ResourceType":"index"},{"Resource":["collection/vectorstorebackenectors1fc1218c"],"Permission":["aoss:DescribeCollectionItems"],"ResourceType":"collection"}],"Principal":["'
            - Fn::GetAtt:
                - OpenSearchIndexCRProviderCRRole466FC04E
                - Arn
            - '"],"Description":""}]'
      Type: data
    DependsOn:
      - knowledgeBaseKBVectorsAOSSApiAccessAll053431A3
      - knowledgeBaseKBVectorsDataAccessPolicy4F5904A6
      - knowledgeBaseKBVectorsEncryptionPolicyBA827C55
      - knowledgeBaseKBVectorsNetworkPolicyB1FE9A28
      - knowledgeBaseKBVectorsVectorCollectionD6F54897
    Metadata:
      aws:cdk:path: BackendStack/knowledgeBase/KBIndex/ManageIndexPolicy
  knowledgeBaseKBIndexVectorIndexB9770063:
    Type: Custom::OpenSearchIndex
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - OpenSearchIndexCRProviderframeworkonEvent6CAE4696
          - Arn
      Endpoint:
        Fn::Join:
          - ""
          - - Fn::GetAtt:
                - knowledgeBaseKBVectorsVectorCollectionD6F54897
                - Id
            - "."
            - Ref: AWS::Region
            - .aoss.amazonaws.com
      IndexName: bedrock-knowledge-base-default-index
      VectorField: bedrock-knowledge-base-default-vector
      Dimensions: 1536
      Precision: float
      DistanceType: l2
      MetadataManagement:
        - MappingField: AMAZON_BEDROCK_TEXT_CHUNK
          DataType: text
          Filterable: true
        - MappingField: AMAZON_BEDROCK_METADATA
          DataType: text
          Filterable: false
    DependsOn:
      - knowledgeBaseKBIndexManageIndexPolicy2C498A7C
      - knowledgeBaseKBVectorsAOSSApiAccessAll053431A3
      - knowledgeBaseKBVectorsDataAccessPolicy4F5904A6
      - knowledgeBaseKBVectorsEncryptionPolicyBA827C55
      - knowledgeBaseKBVectorsNetworkPolicyB1FE9A28
      - knowledgeBaseKBVectorsVectorCollectionD6F54897
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BackendStack/knowledgeBase/KBIndex/VectorIndex/Default
  knowledgeBaseMyCfnKnowledgeBase53E2DA5C:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      KnowledgeBaseConfiguration:
        Type: VECTOR
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn:
            Fn::Join:
              - ""
              - - "arn:"
                - Ref: AWS::Partition
                - ":bedrock:"
                - Ref: AWS::Region
                - ::foundation-model/amazon.titan-embed-text-v1
          EmbeddingModelConfiguration:
            BedrockEmbeddingModelConfiguration:
              EmbeddingDataType: FLOAT32
      Name: KBBackendStacowledgeBase80E07476
      RoleArn:
        Fn::GetAtt:
          - knowledgeBaseRoleEEC71BA3
          - Arn
      StorageConfiguration:
        OpensearchServerlessConfiguration:
          CollectionArn:
            Fn::GetAtt:
              - knowledgeBaseKBVectorsVectorCollectionD6F54897
              - Arn
          FieldMapping:
            MetadataField: AMAZON_BEDROCK_METADATA
            TextField: AMAZON_BEDROCK_TEXT_CHUNK
            VectorField: bedrock-knowledge-base-default-vector
          VectorIndexName: bedrock-knowledge-base-default-index
        Type: OPENSEARCH_SERVERLESS
    DependsOn:
      - knowledgeBaseKBCRPolicyE95EF16F
      - knowledgeBaseKBIndexManageIndexPolicy2C498A7C
      - knowledgeBaseKBIndexVectorIndexB9770063
      - knowledgeBaseRoleDefaultPolicy372C7B66
      - knowledgeBaseRoleEEC71BA3
    Metadata:
      aws:cdk:path: BackendStack/knowledgeBase/MyCfnKnowledgeBase
  knowledgeBaseKBCRPolicyE95EF16F:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: bedrock:CreateKnowledgeBase
            Effect: Allow
            Resource: "*"
          - Action:
              - bedrock:DeleteKnowledgeBase
              - bedrock:TagResource
              - bedrock:UpdateKnowledgeBase
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":bedrock:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :knowledge-base/*
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - knowledgeBaseRoleEEC71BA3
                - Arn
        Version: "2012-10-17"
      PolicyName: knowledgeBaseKBCRPolicyE95EF16F
      Roles:
        - Ref: knowledgeBaseRoleEEC71BA3
    Metadata:
      aws:cdk:path: BackendStack/knowledgeBase/KBCRPolicy/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: Bedrock CreateKnowledgeBase can't be restricted by resource.
            id: AwsSolutions-IAM5
  OpenSearchIndexCRProviderCRRole466FC04E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: knowledgeBaseKBVectorsAOSSApiAccessAll053431A3
    Metadata:
      aws:cdk:path: BackendStack/OpenSearchIndexCRProvider/CRRole/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: CDK CustomResource Lambda uses the AWSLambdaBasicExecutionRole AWS Managed Policy.
            id: AwsSolutions-IAM4
  OpenSearchIndexCRProviderCustomResourcesFunction4F9ADEA2:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: a3fe4b26ec49b4430d0ff27c86004dd592790de9e0fbce450905ca4157bd62d3.zip
      Description: Custom Resource Provider
      Handler: custom_resources.on_event
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - OpenSearchIndexCRProviderCRRole466FC04E
          - Arn
      Runtime: python3.12
      Timeout: 900
    DependsOn:
      - OpenSearchIndexCRProviderCRRole466FC04E
    Metadata:
      aws:cdk:path: BackendStack/OpenSearchIndexCRProvider/CustomResourcesFunction/Resource
      aws:asset:path: asset.a3fe4b26ec49b4430d0ff27c86004dd592790de9e0fbce450905ca4157bd62d3
      aws:asset:is-bundled: false
      aws:asset:property: Code
      cdk_nag:
        rules_to_suppress:
          - reason: Lambda runtime version is managed upstream by CDK.
            id: AwsSolutions-L1
  OpenSearchIndexCRProviderCustomResourcesFunctionLogRetentionC32546EF:
    Type: Custom::LogRetention
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A
          - Arn
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: OpenSearchIndexCRProviderCustomResourcesFunction4F9ADEA2
      RetentionInDays: 7
    Metadata:
      aws:cdk:path: BackendStack/OpenSearchIndexCRProvider/CustomResourcesFunction/LogRetention/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: Lambda runtime version is managed upstream by CDK.
            id: AwsSolutions-L1
  OpenSearchIndexCRProviderProviderRole87B4E831:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: BackendStack/OpenSearchIndexCRProvider/ProviderRole/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: CDK CustomResource Lambda uses the AWSLambdaBasicExecutionRole AWS Managed Policy.
            id: AwsSolutions-IAM4
          - reason: CDK CustomResource Provider has a wildcard to invoke any version of the specific Custom Resource function.
            id: AwsSolutions-IAM5
            applies_to:
              - regex: /^Resource::<OpenSearchIndexCRProviderCustomResourcesFunction[A-Z0-9]+\.Arn>:\*$/g
  OpenSearchIndexCRProviderProviderRoleDefaultPolicy9810CB1F:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - OpenSearchIndexCRProviderCustomResourcesFunction4F9ADEA2
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - OpenSearchIndexCRProviderCustomResourcesFunction4F9ADEA2
                        - Arn
                    - :*
          - Action: lambda:GetFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - OpenSearchIndexCRProviderCustomResourcesFunction4F9ADEA2
                - Arn
        Version: "2012-10-17"
      PolicyName: OpenSearchIndexCRProviderProviderRoleDefaultPolicy9810CB1F
      Roles:
        - Ref: OpenSearchIndexCRProviderProviderRole87B4E831
    Metadata:
      aws:cdk:path: BackendStack/OpenSearchIndexCRProvider/ProviderRole/DefaultPolicy/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: CDK CustomResource Provider has a wildcard to invoke any version of the specific Custom Resource function.
            id: AwsSolutions-IAM5
            applies_to:
              - regex: /^Resource::<OpenSearchIndexCRProviderCustomResourcesFunction[A-Z0-9]+\.Arn>:\*$/g
  OpenSearchIndexCRProviderframeworkonEvent6CAE4696:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: bdc104ed9cab1b5b6421713c8155f0b753380595356f710400609664d3635eca.zip
      Description: AWS CDK resource provider framework - onEvent (BackendStack/OpenSearchIndexCRProvider/Provider)
      Environment:
        Variables:
          USER_ON_EVENT_FUNCTION_ARN:
            Fn::GetAtt:
              - OpenSearchIndexCRProviderCustomResourcesFunction4F9ADEA2
              - Arn
      Handler: framework.onEvent
      Role:
        Fn::GetAtt:
          - OpenSearchIndexCRProviderProviderRole87B4E831
          - Arn
      Runtime: nodejs20.x
      Timeout: 900
    DependsOn:
      - OpenSearchIndexCRProviderProviderRoleDefaultPolicy9810CB1F
      - OpenSearchIndexCRProviderProviderRole87B4E831
    Metadata:
      aws:cdk:path: BackendStack/OpenSearchIndexCRProvider/Provider/framework-onEvent/Resource
      aws:asset:path: asset.bdc104ed9cab1b5b6421713c8155f0b753380595356f710400609664d3635eca
      aws:asset:is-bundled: false
      aws:asset:property: Code
      cdk_nag:
        rules_to_suppress:
          - reason: Lambda runtime version is managed upstream by CDK.
            id: AwsSolutions-L1
  OpenSearchIndexCRProviderframeworkonEventLogRetention64E7FA2B:
    Type: Custom::LogRetention
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A
          - Arn
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: OpenSearchIndexCRProviderframeworkonEvent6CAE4696
      RetentionInDays: 7
    Metadata:
      aws:cdk:path: BackendStack/OpenSearchIndexCRProvider/Provider/framework-onEvent/LogRetention/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: BackendStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:DeleteRetentionPolicy
              - logs:PutRetentionPolicy
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      Roles:
        - Ref: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
    Metadata:
      aws:cdk:path: BackendStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 900
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 2819175352ad1ce0dae768e83fc328fb70fb5f10b4a8ff0ccbcb791f02b0716d.zip
      Role:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
          - Arn
    DependsOn:
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
    Metadata:
      aws:cdk:path: BackendStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/Resource
      aws:asset:path: asset.2819175352ad1ce0dae768e83fc328fb70fb5f10b4a8ff0ccbcb791f02b0716d
      aws:asset:is-bundled: false
      aws:asset:property: Code
  docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 10
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BackendStack/docsbucket-fd54d1e1-d8f8-4a59-84b2-92d19502b20e/Resource
  docsbucketfd54d1e1d8f84a5984b292d19502b20ePolicy014D93D8:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - Fn::GetAtt:
                  - docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
                        - Arn
                    - /*
          - Action:
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutBucketPolicy
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: BackendStack/docsbucket-fd54d1e1-d8f8-4a59-84b2-92d19502b20e/Policy/Resource
  docsbucketfd54d1e1d8f84a5984b292d19502b20eAutoDeleteObjectsCustomResourceB9160055:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
    DependsOn:
      - docsbucketfd54d1e1d8f84a5984b292d19502b20ePolicy014D93D8
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BackendStack/docsbucket-fd54d1e1-d8f8-4a59-84b2-92d19502b20e/AutoDeleteObjectsCustomResource/Default
  docsbucketfd54d1e1d8f84a5984b292d19502b20eNotificationsD03262C7:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:Put
            LambdaFunctionArn:
              Fn::GetAtt:
                - IngestionJob878E4082
                - Arn
      Managed: true
      SkipDestinationValidation: false
    DependsOn:
      - docsbucketfd54d1e1d8f84a5984b292d19502b20eAllowBucketNotificationsToBackendStackIngestionJob56CF52D56D178CFE
      - docsbucketfd54d1e1d8f84a5984b292d19502b20ePolicy014D93D8
    Metadata:
      aws:cdk:path: BackendStack/docsbucket-fd54d1e1-d8f8-4a59-84b2-92d19502b20e/Notifications/Resource
  docsbucketfd54d1e1d8f84a5984b292d19502b20eAllowBucketNotificationsToBackendStackIngestionJob56CF52D56D178CFE:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - IngestionJob878E4082
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::GetAtt:
          - docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
          - Arn
    Metadata:
      aws:cdk:path: BackendStack/docsbucket-fd54d1e1-d8f8-4a59-84b2-92d19502b20e/AllowBucketNotificationsToBackendStackIngestionJob56CF52D5
  CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: BackendStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role
  CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip
      Timeout: 900
      MemorySize: 128
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
          - Arn
      Runtime: nodejs20.x
      Description:
        Fn::Join:
          - ""
          - - "Lambda function for auto-deleting objects in "
            - Ref: docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
            - " S3 bucket."
    DependsOn:
      - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
    Metadata:
      aws:cdk:path: BackendStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler
      aws:asset:path: asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6
      aws:asset:property: Code
  drbucket6dad05d2c9794f049bfcd53e11a103155F4E6BFD:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 10
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BackendStack/drbucket-6dad05d2-c979-4f04-9bfc-d53e11a10315/Resource
  drbucket6dad05d2c9794f049bfcd53e11a10315PolicyA0AE5506:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: drbucket6dad05d2c9794f049bfcd53e11a103155F4E6BFD
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - Fn::GetAtt:
                  - drbucket6dad05d2c9794f049bfcd53e11a103155F4E6BFD
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - drbucket6dad05d2c9794f049bfcd53e11a103155F4E6BFD
                        - Arn
                    - /*
          - Action:
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutBucketPolicy
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - drbucket6dad05d2c9794f049bfcd53e11a103155F4E6BFD
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - drbucket6dad05d2c9794f049bfcd53e11a103155F4E6BFD
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: BackendStack/drbucket-6dad05d2-c979-4f04-9bfc-d53e11a10315/Policy/Resource
  drbucket6dad05d2c9794f049bfcd53e11a10315AutoDeleteObjectsCustomResource9B3FF2AC:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: drbucket6dad05d2c9794f049bfcd53e11a103155F4E6BFD
    DependsOn:
      - drbucket6dad05d2c9794f049bfcd53e11a10315PolicyA0AE5506
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BackendStack/drbucket-6dad05d2-c979-4f04-9bfc-d53e11a10315/AutoDeleteObjectsCustomResource/Default
  ReplicationRoleCE149CEC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
        Version: "2012-10-17"
      Path: /service-role/
    Metadata:
      aws:cdk:path: BackendStack/ReplicationRole/Resource
  ReplicationRoleDefaultPolicy80AD15BB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObjectVersionAcl
              - s3:GetObjectVersionForReplication
              - s3:GetObjectVersionTagging
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
                      - Arn
                  - /*
          - Action:
              - s3:GetReplicationConfiguration
              - s3:ListBucket
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
                - Arn
          - Action:
              - s3:ReplicateDelete
              - s3:ReplicateObject
              - s3:ReplicateTags
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - drbucket6dad05d2c9794f049bfcd53e11a103155F4E6BFD
                      - Arn
                  - /*
        Version: "2012-10-17"
      PolicyName: ReplicationRoleDefaultPolicy80AD15BB
      Roles:
        - Ref: ReplicationRoleCE149CEC
    Metadata:
      aws:cdk:path: BackendStack/ReplicationRole/DefaultPolicy/Resource
  MyCfnBucket:
    Type: AWS::S3::Bucket
    Properties:
      ReplicationConfiguration:
        Role:
          Fn::GetAtt:
            - ReplicationRoleCE149CEC
            - Arn
        Rules:
          - Destination:
              Bucket:
                Fn::GetAtt:
                  - drbucket6dad05d2c9794f049bfcd53e11a103155F4E6BFD
                  - Arn
            Status: Enabled
    Metadata:
      aws:cdk:path: BackendStack/MyCfnBucket
  s3DataSourceAA732D64:
    Type: AWS::Bedrock::DataSource
    Properties:
      DataSourceConfiguration:
        S3Configuration:
          BucketArn:
            Fn::GetAtt:
              - docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
              - Arn
        Type: S3
      KnowledgeBaseId:
        Fn::GetAtt:
          - knowledgeBaseMyCfnKnowledgeBase53E2DA5C
          - KnowledgeBaseId
      Name: docs
      VectorIngestionConfiguration:
        ChunkingConfiguration:
          ChunkingStrategy: FIXED_SIZE
          FixedSizeChunkingConfiguration:
            MaxTokens: 500
            OverlapPercentage: 20
    Metadata:
      aws:cdk:path: BackendStack/s3DataSource/DataSource
  CreateWebDataSourceHandlerServiceRoleB3C6B543:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: BackendStack/CreateWebDataSourceHandler/ServiceRole/Resource
  CreateWebDataSourceHandlerServiceRoleDefaultPolicyFC922D1E:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - bedrock:CreateDataSource
              - bedrock:DeleteDataSource
              - bedrock:UpdateDataSource
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - knowledgeBaseMyCfnKnowledgeBase53E2DA5C
                - KnowledgeBaseArn
        Version: "2012-10-17"
      PolicyName: CreateWebDataSourceHandlerServiceRoleDefaultPolicyFC922D1E
      Roles:
        - Ref: CreateWebDataSourceHandlerServiceRoleB3C6B543
    Metadata:
      aws:cdk:path: BackendStack/CreateWebDataSourceHandler/ServiceRole/DefaultPolicy/Resource
  CreateWebDataSourceHandlerAA0170AE:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: c2cded17ce3c088185635e1d52c76160eccf18983db054a84ed565af267a5449.zip
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID:
            Fn::GetAtt:
              - knowledgeBaseMyCfnKnowledgeBase53E2DA5C
              - KnowledgeBaseId
      FunctionName: create-web-data-source
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CreateWebDataSourceHandlerServiceRoleB3C6B543
          - Arn
      Runtime: nodejs18.x
      Timeout: 60
    DependsOn:
      - CreateWebDataSourceHandlerServiceRoleDefaultPolicyFC922D1E
      - CreateWebDataSourceHandlerServiceRoleB3C6B543
    Metadata:
      aws:cdk:path: BackendStack/CreateWebDataSourceHandler/Resource
      aws:asset:path: asset.c2cded17ce3c088185635e1d52c76160eccf18983db054a84ed565af267a5449
      aws:asset:is-bundled: true
      aws:asset:property: Code
  WebDataSourceProviderframeworkonEventServiceRole576075FE:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: BackendStack/WebDataSourceProvider/framework-onEvent/ServiceRole/Resource
  WebDataSourceProviderframeworkonEventServiceRoleDefaultPolicy0D954923:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - CreateWebDataSourceHandlerAA0170AE
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - CreateWebDataSourceHandlerAA0170AE
                        - Arn
                    - :*
          - Action: lambda:GetFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - CreateWebDataSourceHandlerAA0170AE
                - Arn
        Version: "2012-10-17"
      PolicyName: WebDataSourceProviderframeworkonEventServiceRoleDefaultPolicy0D954923
      Roles:
        - Ref: WebDataSourceProviderframeworkonEventServiceRole576075FE
    Metadata:
      aws:cdk:path: BackendStack/WebDataSourceProvider/framework-onEvent/ServiceRole/DefaultPolicy/Resource
  WebDataSourceProviderframeworkonEvent0D0D236F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: bdc104ed9cab1b5b6421713c8155f0b753380595356f710400609664d3635eca.zip
      Description: AWS CDK resource provider framework - onEvent (BackendStack/WebDataSourceProvider)
      Environment:
        Variables:
          USER_ON_EVENT_FUNCTION_ARN:
            Fn::GetAtt:
              - CreateWebDataSourceHandlerAA0170AE
              - Arn
      Handler: framework.onEvent
      Role:
        Fn::GetAtt:
          - WebDataSourceProviderframeworkonEventServiceRole576075FE
          - Arn
      Runtime: nodejs20.x
      Timeout: 900
    DependsOn:
      - WebDataSourceProviderframeworkonEventServiceRoleDefaultPolicy0D954923
      - WebDataSourceProviderframeworkonEventServiceRole576075FE
    Metadata:
      aws:cdk:path: BackendStack/WebDataSourceProvider/framework-onEvent/Resource
      aws:asset:path: asset.bdc104ed9cab1b5b6421713c8155f0b753380595356f710400609664d3635eca
      aws:asset:is-bundled: false
      aws:asset:property: Code
  WebDataSourceProviderframeworkonEventLogRetention728DB557:
    Type: Custom::LogRetention
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A
          - Arn
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: WebDataSourceProviderframeworkonEvent0D0D236F
      RetentionInDays: 1
    Metadata:
      aws:cdk:path: BackendStack/WebDataSourceProvider/framework-onEvent/LogRetention/Resource
  WebDataSourceResource:
    Type: Custom::BedrockWebDataSource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - WebDataSourceProviderframeworkonEvent0D0D236F
          - Arn
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BackendStack/WebDataSourceResource/Default
  IngestionJobServiceRole82BC1069:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: BackendStack/IngestionJob/ServiceRole/Resource
  IngestionJobServiceRoleDefaultPolicyEE1C0469:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: bedrock:StartIngestionJob
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
                  - Arn
              - Fn::GetAtt:
                  - knowledgeBaseMyCfnKnowledgeBase53E2DA5C
                  - KnowledgeBaseArn
        Version: "2012-10-17"
      PolicyName: IngestionJobServiceRoleDefaultPolicyEE1C0469
      Roles:
        - Ref: IngestionJobServiceRole82BC1069
    Metadata:
      aws:cdk:path: BackendStack/IngestionJob/ServiceRole/DefaultPolicy/Resource
  IngestionJob878E4082:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 2cfa1fbf290e298f0582344e57a0899b6f61902831d999ce06ac5b28ab5d72da.zip
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID:
            Fn::GetAtt:
              - knowledgeBaseMyCfnKnowledgeBase53E2DA5C
              - KnowledgeBaseId
          DATA_SOURCE_ID:
            Fn::GetAtt:
              - s3DataSourceAA732D64
              - DataSourceId
          BUCKET_ARN:
            Fn::GetAtt:
              - docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
              - Arn
      FunctionName: start-ingestion-trigger
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - IngestionJobServiceRole82BC1069
          - Arn
      Runtime: nodejs20.x
      Timeout: 900
    DependsOn:
      - IngestionJobServiceRoleDefaultPolicyEE1C0469
      - IngestionJobServiceRole82BC1069
    Metadata:
      aws:cdk:path: BackendStack/IngestionJob/Resource
      aws:asset:path: asset.2cfa1fbf290e298f0582344e57a0899b6f61902831d999ce06ac5b28ab5d72da
      aws:asset:is-bundled: true
      aws:asset:property: Code
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: BackendStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: BackendStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |-
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'
          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
            response_status = "SUCCESS"
            error_message = ""
            try:
              props = event["ResourceProperties"]
              notification_configuration = props["NotificationConfiguration"]
              managed = props.get('Managed', 'true').lower() == 'true'
              skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'
              stack_id = event['StackId']
              old = event.get("OldResourceProperties", {}).get("NotificationConfiguration", {})
              if managed:
                config = handle_managed(event["RequestType"], notification_configuration)
              else:
                config = handle_unmanaged(props["BucketName"], stack_id, event["RequestType"], notification_configuration, old)
              s3.put_bucket_notification_configuration(Bucket=props["BucketName"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)
            except Exception as e:
              logging.exception("Failed to put bucket notification configuration")
              response_status = "FAILED"
              error_message = f"Error: {str(e)}. "
            finally:
              submit_response(event, context, response_status, error_message)

          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration

          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):
            def get_id(n):
              n['Id'] = ''
              sorted_notifications = sort_filter_rules(n)
              strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('"Name": "prefix"', '"Name": "Prefix"').replace('"Name": "suffix"', '"Name": "Suffix"')
              return f"{stack_id}-{hash(strToHash)}"
            def with_id(n):
              n['Id'] = get_id(n)
              return n

            external_notifications = {}
            existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)
            for t in CONFIGURATION_TYPES:
              if request_type == 'Update':
                  old_incoming_ids = [get_id(n) for n in old.get(t, [])]
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      
              elif request_type == 'Delete':
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]
              elif request_type == 'Create':
                  external_notifications[t] = [n for n in existing_notifications.get(t, [])]
            if EVENTBRIDGE_CONFIGURATION in existing_notifications:
              external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

            if request_type == 'Delete':
              return external_notifications

            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming

            if EVENTBRIDGE_CONFIGURATION in notification_configuration:
              notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
            elif EVENTBRIDGE_CONFIGURATION in external_notifications:
              notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

            return notifications

          def submit_response(event: dict, context, response_status: str, error_message: str):
            response_body = json.dumps(
              {
                "Status": response_status,
                "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                "StackId": event["StackId"],
                "RequestId": event["RequestId"],
                "LogicalResourceId": event["LogicalResourceId"],
                "NoEcho": False,
              }
            ).encode("utf-8")
            headers = {"content-type": "", "content-length": str(len(response_body))}
            try:
              req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
              with urllib.request.urlopen(req) as response:
                print(response.read().decode("utf-8"))
              print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing request.urlopen(..): " + str(e))

          def sort_filter_rules(json_obj):
            if not isinstance(json_obj, dict):
                return json_obj
            for key, value in json_obj.items():
                if isinstance(value, dict):
                    json_obj[key] = sort_filter_rules(value)
                elif isinstance(value, list):
                    json_obj[key] = [sort_filter_rules(item) for item in value]
            if "Filter" in json_obj and "Key" in json_obj["Filter"] and "FilterRules" in json_obj["Filter"]["Key"]:
                filter_rules = json_obj["Filter"]["Key"]["FilterRules"]
                sorted_filter_rules = sorted(filter_rules, key=lambda x: x["Name"])
                json_obj["Filter"]["Key"]["FilterRules"] = sorted_filter_rules
            return json_obj
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.11
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: BackendStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  CrawlJobServiceRole9FE61FAB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: BackendStack/CrawlJob/ServiceRole/Resource
  CrawlJobServiceRoleDefaultPolicy2B45D309:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: bedrock:StartIngestionJob
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - knowledgeBaseMyCfnKnowledgeBase53E2DA5C
                - KnowledgeBaseArn
        Version: "2012-10-17"
      PolicyName: CrawlJobServiceRoleDefaultPolicy2B45D309
      Roles:
        - Ref: CrawlJobServiceRole9FE61FAB
    Metadata:
      aws:cdk:path: BackendStack/CrawlJob/ServiceRole/DefaultPolicy/Resource
  CrawlJobC65D0915:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 5d8ace1ed5f63e1bcbe8b13d67b6c7b0693dda8f8b11ea9e5f7c826f9b5477d5.zip
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID:
            Fn::GetAtt:
              - knowledgeBaseMyCfnKnowledgeBase53E2DA5C
              - KnowledgeBaseId
          DATA_SOURCE_ID:
            Fn::GetAtt:
              - WebDataSourceResource
              - DataSourceId
      FunctionName: start-web-crawl-trigger
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CrawlJobServiceRole9FE61FAB
          - Arn
      Runtime: nodejs20.x
      Timeout: 900
    DependsOn:
      - CrawlJobServiceRoleDefaultPolicy2B45D309
      - CrawlJobServiceRole9FE61FAB
    Metadata:
      aws:cdk:path: BackendStack/CrawlJob/Resource
      aws:asset:path: asset.5d8ace1ed5f63e1bcbe8b13d67b6c7b0693dda8f8b11ea9e5f7c826f9b5477d5
      aws:asset:is-bundled: true
      aws:asset:property: Code
  ScheduleWebCrawlRule6D2888EE:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - CrawlJobC65D0915
              - Arn
          Id: Target0
    Metadata:
      aws:cdk:path: BackendStack/ScheduleWebCrawlRule/Resource
  ScheduleWebCrawlRuleAllowEventRuleBackendStackCrawlJobC6FAC4E73A28CA51:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - CrawlJobC65D0915
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - ScheduleWebCrawlRule6D2888EE
          - Arn
    Metadata:
      aws:cdk:path: BackendStack/ScheduleWebCrawlRule/AllowEventRuleBackendStackCrawlJobC6FAC4E7
  UpdateWebUrlsServiceRole453F5863:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: BackendStack/UpdateWebUrls/ServiceRole/Resource
  UpdateWebUrlsServiceRoleDefaultPolicyE8DF2C55:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - bedrock:GetDataSource
              - bedrock:UpdateDataSource
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - knowledgeBaseMyCfnKnowledgeBase53E2DA5C
                - KnowledgeBaseArn
        Version: "2012-10-17"
      PolicyName: UpdateWebUrlsServiceRoleDefaultPolicyE8DF2C55
      Roles:
        - Ref: UpdateWebUrlsServiceRole453F5863
    Metadata:
      aws:cdk:path: BackendStack/UpdateWebUrls/ServiceRole/DefaultPolicy/Resource
  UpdateWebUrlsBE5108CE:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 7a4f65a1e4ca82f9b6081a15b9f21292750af08b81246635f00feb015dda95ea.zip
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID:
            Fn::GetAtt:
              - knowledgeBaseMyCfnKnowledgeBase53E2DA5C
              - KnowledgeBaseId
          DATA_SOURCE_ID:
            Fn::GetAtt:
              - WebDataSourceResource
              - DataSourceId
          DATA_SOURCE_NAME: WebCrawlerDataSource
      FunctionName: update-web-crawl-urls
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - UpdateWebUrlsServiceRole453F5863
          - Arn
      Runtime: nodejs20.x
      Timeout: 900
    DependsOn:
      - UpdateWebUrlsServiceRoleDefaultPolicyE8DF2C55
      - UpdateWebUrlsServiceRole453F5863
    Metadata:
      aws:cdk:path: BackendStack/UpdateWebUrls/Resource
      aws:asset:path: asset.7a4f65a1e4ca82f9b6081a15b9f21292750af08b81246635f00feb015dda95ea
      aws:asset:is-bundled: true
      aws:asset:property: Code
  GetWebUrlsServiceRole4EFA5A3A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: BackendStack/GetWebUrls/ServiceRole/Resource
  GetWebUrlsServiceRoleDefaultPolicy42A1F148:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: bedrock:GetDataSource
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - knowledgeBaseMyCfnKnowledgeBase53E2DA5C
                - KnowledgeBaseArn
        Version: "2012-10-17"
      PolicyName: GetWebUrlsServiceRoleDefaultPolicy42A1F148
      Roles:
        - Ref: GetWebUrlsServiceRole4EFA5A3A
    Metadata:
      aws:cdk:path: BackendStack/GetWebUrls/ServiceRole/DefaultPolicy/Resource
  GetWebUrls64A9507B:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 28d1df80a8a436a4a08e5d3c70a90cb550dc2ebdadfa8f2591c841368470aab3.zip
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID:
            Fn::GetAtt:
              - knowledgeBaseMyCfnKnowledgeBase53E2DA5C
              - KnowledgeBaseId
          DATA_SOURCE_ID:
            Fn::GetAtt:
              - WebDataSourceResource
              - DataSourceId
      FunctionName: get-web-crawl-urls
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - GetWebUrlsServiceRole4EFA5A3A
          - Arn
      Runtime: nodejs20.x
      Timeout: 900
    DependsOn:
      - GetWebUrlsServiceRoleDefaultPolicy42A1F148
      - GetWebUrlsServiceRole4EFA5A3A
    Metadata:
      aws:cdk:path: BackendStack/GetWebUrls/Resource
      aws:asset:path: asset.28d1df80a8a436a4a08e5d3c70a90cb550dc2ebdadfa8f2591c841368470aab3
      aws:asset:is-bundled: true
      aws:asset:property: Code
  rag8F750088:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API for RAG
      Name: rag-api
    Metadata:
      aws:cdk:path: BackendStack/rag/Resource
  ragDeployment82271D10f04d6624fd5777b2cc3d509afa66aa60:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: API for RAG
      RestApiId:
        Ref: rag8F750088
    DependsOn:
      - ragdocsOPTIONSB993BAE4
      - ragdocsPOSTBEEBFBCA
      - ragdocsFC765487
      - ragOPTIONS08DA9E19
      - ragurlsGET8E4ABBFE
      - ragurlsOPTIONS9BE3BDA7
      - ragurlsA8D221EA
      - ragweburlsOPTIONSCFF67F2F
      - ragweburlsPOST0D4CD615
      - ragweburlsAA40FEE3
    Metadata:
      aws:cdk:path: BackendStack/rag/Deployment/Resource
  ragDeploymentStageprodFFA9FBE9:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ragDeployment82271D10f04d6624fd5777b2cc3d509afa66aa60
      RestApiId:
        Ref: rag8F750088
      StageName: prod
    Metadata:
      aws:cdk:path: BackendStack/rag/DeploymentStage.prod/Resource
  ragOPTIONS08DA9E19:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
      ResourceId:
        Fn::GetAtt:
          - rag8F750088
          - RootResourceId
      RestApiId:
        Ref: rag8F750088
    Metadata:
      aws:cdk:path: BackendStack/rag/Default/OPTIONS/Resource
  ragdocsFC765487:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - rag8F750088
          - RootResourceId
      PathPart: docs
      RestApiId:
        Ref: rag8F750088
    Metadata:
      aws:cdk:path: BackendStack/rag/Default/docs/Resource
  ragdocsOPTIONSB993BAE4:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
      ResourceId:
        Ref: ragdocsFC765487
      RestApiId:
        Ref: rag8F750088
    Metadata:
      aws:cdk:path: BackendStack/rag/Default/docs/OPTIONS/Resource
  ragdocsPOSTApiPermissionBackendStackrag73B9B129POSTdocs7DC1C983:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - Query435140A1
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: rag8F750088
            - /
            - Ref: ragDeploymentStageprodFFA9FBE9
            - /POST/docs
    Metadata:
      aws:cdk:path: BackendStack/rag/Default/docs/POST/ApiPermission.BackendStackrag73B9B129.POST..docs
  ragdocsPOSTApiPermissionTestBackendStackrag73B9B129POSTdocsC6CA0733:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - Query435140A1
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: rag8F750088
            - /test-invoke-stage/POST/docs
    Metadata:
      aws:cdk:path: BackendStack/rag/Default/docs/POST/ApiPermission.Test.BackendStackrag73B9B129.POST..docs
  ragdocsPOSTBEEBFBCA:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - Query435140A1
                  - Arn
              - /invocations
      ResourceId:
        Ref: ragdocsFC765487
      RestApiId:
        Ref: rag8F750088
    Metadata:
      aws:cdk:path: BackendStack/rag/Default/docs/POST/Resource
  ragweburlsAA40FEE3:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - rag8F750088
          - RootResourceId
      PathPart: web-urls
      RestApiId:
        Ref: rag8F750088
    Metadata:
      aws:cdk:path: BackendStack/rag/Default/web-urls/Resource
  ragweburlsOPTIONSCFF67F2F:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
      ResourceId:
        Ref: ragweburlsAA40FEE3
      RestApiId:
        Ref: rag8F750088
    Metadata:
      aws:cdk:path: BackendStack/rag/Default/web-urls/OPTIONS/Resource
  ragweburlsPOSTApiPermissionBackendStackrag73B9B129POSTweburlsB4F8F6A9:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - UpdateWebUrlsBE5108CE
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: rag8F750088
            - /
            - Ref: ragDeploymentStageprodFFA9FBE9
            - /POST/web-urls
    Metadata:
      aws:cdk:path: BackendStack/rag/Default/web-urls/POST/ApiPermission.BackendStackrag73B9B129.POST..web-urls
  ragweburlsPOSTApiPermissionTestBackendStackrag73B9B129POSTweburls6A258B35:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - UpdateWebUrlsBE5108CE
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: rag8F750088
            - /test-invoke-stage/POST/web-urls
    Metadata:
      aws:cdk:path: BackendStack/rag/Default/web-urls/POST/ApiPermission.Test.BackendStackrag73B9B129.POST..web-urls
  ragweburlsPOST0D4CD615:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - UpdateWebUrlsBE5108CE
                  - Arn
              - /invocations
      ResourceId:
        Ref: ragweburlsAA40FEE3
      RestApiId:
        Ref: rag8F750088
    Metadata:
      aws:cdk:path: BackendStack/rag/Default/web-urls/POST/Resource
  ragurlsA8D221EA:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - rag8F750088
          - RootResourceId
      PathPart: urls
      RestApiId:
        Ref: rag8F750088
    Metadata:
      aws:cdk:path: BackendStack/rag/Default/urls/Resource
  ragurlsOPTIONS9BE3BDA7:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
      ResourceId:
        Ref: ragurlsA8D221EA
      RestApiId:
        Ref: rag8F750088
    Metadata:
      aws:cdk:path: BackendStack/rag/Default/urls/OPTIONS/Resource
  ragurlsGETApiPermissionBackendStackrag73B9B129GETurls30D63D85:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - GetWebUrls64A9507B
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: rag8F750088
            - /
            - Ref: ragDeploymentStageprodFFA9FBE9
            - /GET/urls
    Metadata:
      aws:cdk:path: BackendStack/rag/Default/urls/GET/ApiPermission.BackendStackrag73B9B129.GET..urls
  ragurlsGETApiPermissionTestBackendStackrag73B9B129GETurlsDDDFDEF0:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - GetWebUrls64A9507B
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: rag8F750088
            - /test-invoke-stage/GET/urls
    Metadata:
      aws:cdk:path: BackendStack/rag/Default/urls/GET/ApiPermission.Test.BackendStackrag73B9B129.GET..urls
  ragurlsGET8E4ABBFE:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - GetWebUrls64A9507B
                  - Arn
              - /invocations
      ResourceId:
        Ref: ragurlsA8D221EA
      RestApiId:
        Ref: rag8F750088
    Metadata:
      aws:cdk:path: BackendStack/rag/Default/urls/GET/Resource
  ragusageplan598D5CF7:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId:
            Ref: rag8F750088
          Stage:
            Ref: ragDeploymentStageprodFFA9FBE9
          Throttle: {}
      Description: usage plan for dev
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      UsagePlanName: dev-docs-plan
    Metadata:
      aws:cdk:path: BackendStack/rag/usage-plan/Resource
  QueryServiceRole2FE01FD6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: BackendStack/Query/ServiceRole/Resource
  QueryServiceRoleDefaultPolicy15FA4F38:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - bedrock:InvokeModel
              - bedrock:Retrieve
              - bedrock:RetrieveAndGenerate
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: QueryServiceRoleDefaultPolicy15FA4F38
      Roles:
        - Ref: QueryServiceRole2FE01FD6
    Metadata:
      aws:cdk:path: BackendStack/Query/ServiceRole/DefaultPolicy/Resource
  Query435140A1:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: c7064a7b8e999405c55fd834ec4750ff760c968077400b5bfc868713fa9af71c.zip
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID:
            Fn::GetAtt:
              - knowledgeBaseMyCfnKnowledgeBase53E2DA5C
              - KnowledgeBaseId
      FunctionName: query-bedrock-llm
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - QueryServiceRole2FE01FD6
          - Arn
      Runtime: nodejs20.x
      Timeout: 29
    DependsOn:
      - QueryServiceRoleDefaultPolicy15FA4F38
      - QueryServiceRole2FE01FD6
    Metadata:
      aws:cdk:path: BackendStack/Query/Resource
      aws:asset:path: asset.c7064a7b8e999405c55fd834ec4750ff760c968077400b5bfc868713fa9af71c
      aws:asset:is-bundled: true
      aws:asset:property: Code
  DevIpSet:
    Type: AWS::WAFv2::IPSet
    Properties:
      Addresses: []
      Description: List of allowed IP addresses
      IPAddressVersion: IPV4
      Scope: REGIONAL
    Metadata:
      aws:cdk:path: BackendStack/DevIpSet
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Block: {}
      Rules:
        - Action:
            Allow: {}
          Name: IPAllowList
          Priority: 1
          Statement:
            IPSetReferenceStatement:
              Arn:
                Fn::GetAtt:
                  - DevIpSet
                  - Arn
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: IPAllowList
            SampledRequestsEnabled: true
      Scope: REGIONAL
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: webACL
        SampledRequestsEnabled: true
    Metadata:
      aws:cdk:path: BackendStack/WebACL
  awsWafLogs58D3FD01:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: aws-waf-logs-backend
      RetentionInDays: 731
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BackendStack/awsWafLogs/Resource
  WAFLoggingConfiguration:
    Type: AWS::WAFv2::LoggingConfiguration
    Properties:
      LogDestinationConfigs:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":logs:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":log-group:"
              - Ref: awsWafLogs58D3FD01
      ResourceArn:
        Fn::GetAtt:
          - WebACL
          - Arn
    Metadata:
      aws:cdk:path: BackendStack/WAFLoggingConfiguration
  WebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: AWS::Region
            - ::/restapis/
            - Ref: rag8F750088
            - /stages/
            - Ref: ragDeploymentStageprodFFA9FBE9
      WebACLArn:
        Fn::GetAtt:
          - WebACL
          - Arn
    DependsOn:
      - ragdocsOPTIONSB993BAE4
      - ragdocsPOSTApiPermissionBackendStackrag73B9B129POSTdocs7DC1C983
      - ragdocsPOSTApiPermissionTestBackendStackrag73B9B129POSTdocsC6CA0733
      - ragdocsPOSTBEEBFBCA
      - ragdocsFC765487
      - ragOPTIONS08DA9E19
      - ragurlsGETApiPermissionBackendStackrag73B9B129GETurls30D63D85
      - ragurlsGETApiPermissionTestBackendStackrag73B9B129GETurlsDDDFDEF0
      - ragurlsGET8E4ABBFE
      - ragurlsOPTIONS9BE3BDA7
      - ragurlsA8D221EA
      - ragweburlsOPTIONSCFF67F2F
      - ragweburlsPOSTApiPermissionBackendStackrag73B9B129POSTweburlsB4F8F6A9
      - ragweburlsPOSTApiPermissionTestBackendStackrag73B9B129POSTweburls6A258B35
      - ragweburlsPOST0D4CD615
      - ragweburlsAA40FEE3
      - ragDeployment82271D10f04d6624fd5777b2cc3d509afa66aa60
      - ragDeploymentStageprodFFA9FBE9
      - rag8F750088
      - ragusageplan598D5CF7
    Metadata:
      aws:cdk:path: BackendStack/WebACLAssociation
  FrontendBucketEFE2E19C:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
        - Key: aws-cdk:cr-owned:8e1b7133
          Value: "true"
      WebsiteConfiguration:
        IndexDocument: index.html
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BackendStack/FrontendBucket/Resource
  FrontendBucketPolicy1DFF75D9:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: FrontendBucketEFE2E19C
      PolicyDocument:
        Statement:
          - Action:
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutBucketPolicy
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - FrontendBucketEFE2E19C
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - FrontendBucketEFE2E19C
                        - Arn
                    - /*
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Principal:
              CanonicalUser:
                Fn::GetAtt:
                  - OriginAccessIdentityDF1E3CAC
                  - S3CanonicalUserId
            Resource:
              - Fn::GetAtt:
                  - FrontendBucketEFE2E19C
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - FrontendBucketEFE2E19C
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: BackendStack/FrontendBucket/Policy/Resource
  FrontendBucketAutoDeleteObjectsCustomResourceDB860B32:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: FrontendBucketEFE2E19C
    DependsOn:
      - FrontendBucketPolicy1DFF75D9
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BackendStack/FrontendBucket/AutoDeleteObjectsCustomResource/Default
  OriginAccessIdentityDF1E3CAC:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Allows CloudFront to reach the bucket
    Metadata:
      aws:cdk:path: BackendStack/OriginAccessIdentity/Resource
  Distribution830FAC52:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: true
          TargetOriginId: BackendStackDistributionOrigin166E1265C
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: http-only
              OriginSSLProtocols:
                - TLSv1.2
            DomainName:
              Fn::Select:
                - 2
                - Fn::Split:
                    - /
                    - Fn::GetAtt:
                        - FrontendBucketEFE2E19C
                        - WebsiteURL
            Id: BackendStackDistributionOrigin166E1265C
    Metadata:
      aws:cdk:path: BackendStack/Distribution/Resource
  DeployFrontendAwsCliLayerD774ED8F:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 8341cb239e4e1842be4d85a62c1b0a519b37f6f3b0e6acc9758db8a98f518fa3.zip
      Description: /opt/awscli/aws
    Metadata:
      aws:cdk:path: BackendStack/DeployFrontend/AwsCliLayer/Resource
      aws:asset:path: asset.8341cb239e4e1842be4d85a62c1b0a519b37f6f3b0e6acc9758db8a98f518fa3.zip
      aws:asset:is-bundled: false
      aws:asset:property: Content
  DeployFrontendCustomResource3E02C3B7:
    Type: Custom::CDKBucketDeployment
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536
          - Arn
      SourceBucketNames:
        - Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
      SourceObjectKeys:
        - 223344b4107c5dcf6fe2c1a2d6116d24db256e2fe4c0dc3cd8339c032be8c529.zip
      DestinationBucketName:
        Ref: FrontendBucketEFE2E19C
      Prune: true
      DistributionId:
        Ref: Distribution830FAC52
      DistributionPaths:
        - /*
      OutputObjectKeys: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BackendStack/DeployFrontend/CustomResource/Default
  CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: BackendStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/Resource
  CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":s3:::"
                    - Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
                    - /*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":s3:::"
                    - Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - FrontendBucketEFE2E19C
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - FrontendBucketEFE2E19C
                        - Arn
                    - /*
          - Action:
              - cloudfront:CreateInvalidation
              - cloudfront:GetInvalidation
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF
      Roles:
        - Ref: CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265
    Metadata:
      aws:cdk:path: BackendStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy/Resource
  CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 4fe0aba5e672b596d0f72505a9eec502f98d46906bb30fae2511fbdc1df4956f.zip
      Environment:
        Variables:
          AWS_CA_BUNDLE: /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
      Handler: index.handler
      Layers:
        - Ref: DeployFrontendAwsCliLayerD774ED8F
      Role:
        Fn::GetAtt:
          - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265
          - Arn
      Runtime: python3.11
      Timeout: 900
    DependsOn:
      - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF
      - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265
    Metadata:
      aws:cdk:path: BackendStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Resource
      aws:asset:path: asset.4fe0aba5e672b596d0f72505a9eec502f98d46906bb30fae2511fbdc1df4956f
      aws:asset:is-bundled: false
      aws:asset:property: Code
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/21T227iMBD9lr4Ht4C02r4tBXWFlm4R0XYfI2MPqcGxkS9hUZR/37GdEKh4mjPjM+O5Tsj4+zMZP9CTHTF+GEmxJU3uKDtkaCoaQSvSbLSEbL5TUa61FOwc1A69UUVL4IP9xtBm+gjKAjXs04KpwUiwljTIy4F5I9x58JxrKYE5oVXQZowhtQ+zBW40O0TPX0qfJPASXqiNmS2oo7n2hkGbSVptOSXNq1eXUNd4DaYS1nbaip7BfICJei5UKcHpC7/N7LRoqLXgLJkFkXE4Sn2uQDny4tkB3OJiCGzSJGvMLMHwTYeSGAq+1jFzXWJnVrrcgMNwISNUfhrtjzHVDvclFkpz2FvyO4pLiVCjL8bZ+G5qKNuMHkVJHZzoGV/AutlRxMcODkXEdg4a7kIZwySA/NjmWN4buE/N48gT6l+7yAn/sei4ljS2+6K02Ynu6kkc53Kdpy79he1svupqLXEYc612ovSG9sNLDJyEZoKmCTGpPd8ZjQNp3o1At7Q4Sx566NJiBc5r4NxlLIR1Rmx9/8u13rY3ZWFGXCSet05Xd0uOmxIahiVkLPIK0z1asja6FhzMlwi9ud/pd++O3vWzlmFPC7xJJgWZnexciri6bfZExmTy/O3hB96vpFv7WIKC0LEaRlTEq2ZaYUGehbW43NEHXpo2t6eUT68v6e7lJrerSx1YRR3fhOLwr+MtA26zsKlkbx/ryZSMx+TpYW+FGBmP7a+AbJL8DwENCvuMBAAA
    Metadata:
      aws:cdk:path: BackendStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Conditions:
  knowledgeBaseKBVectorsIsDataAccessPolicyNotEmpty41B43429:
    Fn::Not:
      - Fn::Equals:
          - 0
          - 1
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-3
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-3
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-4
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
      - Fn::Equals:
          - Ref: AWS::Region
          - us-west-2
Outputs:
  ragEndpoint3CC7D4AD:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: rag8F750088
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /
          - Ref: ragDeploymentStageprodFFA9FBE9
          - /
  APIGatewayUrl:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: rag8F750088
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /
          - Ref: ragDeploymentStageprodFFA9FBE9
          - /
  DocsBucketName:
    Value:
      Ref: docsbucketfd54d1e1d8f84a5984b292d19502b20e6DC07C8F
  CloudFrontURL:
    Value:
      Fn::GetAtt:
        - Distribution830FAC52
        - DomainName
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]

