"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Memory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const validation = require("../../../common/helpers/validation-helpers");
/**
 * Memory options for agent conversational context retention.
 * Memory enables agents to maintain context across multiple sessions and recall past interactions.
 * By default, agents retain context from the current session only.
 */
var MemoryType;
(function (MemoryType) {
    /**
     * Your agent uses memory summarization to enhance accuracy using
     * advanced prompt templates in Amazon Bedrock to call the foundation model with guidelines
     * to summarize all your sessions. You can optionally modify the default prompt template
     * or provide your own custom parser to parse model output.
     *
     * Since the summarization process takes place in an asynchronous flow after a session ends,
     * logs for any failures in summarization due to overridden template or parser will be
     * published to your AWS accounts. For more information on enabling the logging, see
     * Enable memory summarization log delivery.
     */
    MemoryType["SESSION_SUMMARY"] = "SESSION_SUMMARY";
})(MemoryType || (MemoryType = {}));
/**
 * Memory class for managing Bedrock Agent memory configurations. Enables conversational context retention
 * across multiple sessions through session identifiers. Memory context is stored with unique
 * memory IDs per user, allowing access to conversation history and summaries. Supports viewing
 * stored sessions and clearing memory.
 *
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/agents-memory.html
 */
class Memory {
    /**
     * Creates a session summary memory with custom configuration.
     * @param props Optional memory configuration properties
     * @returns Memory configuration object
     */
    static sessionSummary(props) {
        // Do some checks
        validation.throwIfInvalid(this.validateSessionSummaryMemoryProps, props);
        return {
            enabledMemoryTypes: [MemoryType.SESSION_SUMMARY],
            storageDays: props?.memoryDurationDays ?? 30,
            sessionSummaryConfiguration: {
                maxRecentSessions: props?.maxRecentSessions ?? 20,
            },
        };
    }
    /**
     * Validate at synth time the configuration.
     */
    static validateSessionSummaryMemoryProps(props) {
        let errors = [];
        // Validate storage days is between 0 and 365
        if (props.memoryDurationDays !== undefined) {
            if (props.memoryDurationDays < 1 || props.memoryDurationDays > 365) {
                errors.push('memoryDurationDays must be between 1 and 365');
            }
        }
        if (props.maxRecentSessions !== undefined) {
            if (props.maxRecentSessions < 1) {
                errors.push('maxRecentSessions must be greater than 0');
            }
        }
        return errors;
    }
}
exports.Memory = Memory;
_a = JSII_RTTI_SYMBOL_1;
Memory[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.Memory", version: "0.1.296" };
/**
 * Returns session summary memory with default configuration.
 * @default memoryDurationDays=30, maxRecentSessions=20
 */
Memory.SESSION_SUMMARY = Memory.sessionSummary({ memoryDurationDays: 30, maxRecentSessions: 20 });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtb3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Nkay1saWIvYmVkcm9jay9hZ2VudHMvbWVtb3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBY0EseUVBQXlFO0FBQ3pFOzs7O0dBSUc7QUFDSCxJQUFLLFVBYUo7QUFiRCxXQUFLLFVBQVU7SUFDYjs7Ozs7Ozs7OztPQVVHO0lBQ0gsaURBQW1DLENBQUE7QUFDckMsQ0FBQyxFQWJJLFVBQVUsS0FBVixVQUFVLFFBYWQ7QUFnQkQ7Ozs7Ozs7R0FPRztBQUNILE1BQWEsTUFBTTtJQU9qQjs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFnQztRQUMzRCxpQkFBaUI7UUFDakIsVUFBVSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsaUNBQWlDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFekUsT0FBTztZQUNMLGtCQUFrQixFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQztZQUNoRCxXQUFXLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixJQUFJLEVBQUU7WUFDNUMsMkJBQTJCLEVBQUU7Z0JBQzNCLGlCQUFpQixFQUFFLEtBQUssRUFBRSxpQkFBaUIsSUFBSSxFQUFFO2FBQ2xEO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNLLE1BQU0sQ0FBQyxpQ0FBaUMsQ0FBQyxLQUFnQztRQUMvRSxJQUFJLE1BQU0sR0FBYSxFQUFFLENBQUM7UUFFMUIsNkNBQTZDO1FBQzdDLElBQUksS0FBSyxDQUFDLGtCQUFrQixLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQzNDLElBQUksS0FBSyxDQUFDLGtCQUFrQixHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxFQUFFLENBQUM7Z0JBQ25FLE1BQU0sQ0FBQyxJQUFJLENBQUMsOENBQThDLENBQUMsQ0FBQztZQUM5RCxDQUFDO1FBQ0gsQ0FBQztRQUNELElBQUksS0FBSyxDQUFDLGlCQUFpQixLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQzFDLElBQUksS0FBSyxDQUFDLGlCQUFpQixHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUNoQyxNQUFNLENBQUMsSUFBSSxDQUFDLDBDQUEwQyxDQUFDLENBQUM7WUFDMUQsQ0FBQztRQUNILENBQUM7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztBQTVDSCx3QkE2Q0M7OztBQTVDQzs7O0dBR0c7QUFDb0Isc0JBQWUsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsRUFBRSxFQUFFLGlCQUFpQixFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDZm5BZ2VudCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1iZWRyb2NrJztcbmltcG9ydCAqIGFzIHZhbGlkYXRpb24gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2hlbHBlcnMvdmFsaWRhdGlvbi1oZWxwZXJzJztcbi8qKlxuICogTWVtb3J5IG9wdGlvbnMgZm9yIGFnZW50IGNvbnZlcnNhdGlvbmFsIGNvbnRleHQgcmV0ZW50aW9uLlxuICogTWVtb3J5IGVuYWJsZXMgYWdlbnRzIHRvIG1haW50YWluIGNvbnRleHQgYWNyb3NzIG11bHRpcGxlIHNlc3Npb25zIGFuZCByZWNhbGwgcGFzdCBpbnRlcmFjdGlvbnMuXG4gKiBCeSBkZWZhdWx0LCBhZ2VudHMgcmV0YWluIGNvbnRleHQgZnJvbSB0aGUgY3VycmVudCBzZXNzaW9uIG9ubHkuXG4gKi9cbmVudW0gTWVtb3J5VHlwZSB7XG4gIC8qKlxuICAgKiBZb3VyIGFnZW50IHVzZXMgbWVtb3J5IHN1bW1hcml6YXRpb24gdG8gZW5oYW5jZSBhY2N1cmFjeSB1c2luZ1xuICAgKiBhZHZhbmNlZCBwcm9tcHQgdGVtcGxhdGVzIGluIEFtYXpvbiBCZWRyb2NrIHRvIGNhbGwgdGhlIGZvdW5kYXRpb24gbW9kZWwgd2l0aCBndWlkZWxpbmVzXG4gICAqIHRvIHN1bW1hcml6ZSBhbGwgeW91ciBzZXNzaW9ucy4gWW91IGNhbiBvcHRpb25hbGx5IG1vZGlmeSB0aGUgZGVmYXVsdCBwcm9tcHQgdGVtcGxhdGVcbiAgICogb3IgcHJvdmlkZSB5b3VyIG93biBjdXN0b20gcGFyc2VyIHRvIHBhcnNlIG1vZGVsIG91dHB1dC5cbiAgICpcbiAgICogU2luY2UgdGhlIHN1bW1hcml6YXRpb24gcHJvY2VzcyB0YWtlcyBwbGFjZSBpbiBhbiBhc3luY2hyb25vdXMgZmxvdyBhZnRlciBhIHNlc3Npb24gZW5kcyxcbiAgICogbG9ncyBmb3IgYW55IGZhaWx1cmVzIGluIHN1bW1hcml6YXRpb24gZHVlIHRvIG92ZXJyaWRkZW4gdGVtcGxhdGUgb3IgcGFyc2VyIHdpbGwgYmVcbiAgICogcHVibGlzaGVkIHRvIHlvdXIgQVdTIGFjY291bnRzLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBlbmFibGluZyB0aGUgbG9nZ2luZywgc2VlXG4gICAqIEVuYWJsZSBtZW1vcnkgc3VtbWFyaXphdGlvbiBsb2cgZGVsaXZlcnkuXG4gICAqL1xuICBTRVNTSU9OX1NVTU1BUlkgPSAnU0VTU0lPTl9TVU1NQVJZJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uU3VtbWFyeU1lbW9yeVByb3BzIHtcbiAgLyoqXG4gICAqIER1cmF0aW9uIGluIGRheXMgZm9yIHdoaWNoIHNlc3Npb24gc3VtbWFyaWVzIGFyZSByZXRhaW5lZCAoMS0zNjUpXG4gICAqIEBkZWZhdWx0IDMwXG4gICAqL1xuICByZWFkb25seSBtZW1vcnlEdXJhdGlvbkRheXM/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJlY2VudCBzZXNzaW9uIHN1bW1hcmllcyB0byBpbmNsdWRlIChtaW4gMSlcbiAgICogQGRlZmF1bHQgMjBcbiAgICovXG4gIHJlYWRvbmx5IG1heFJlY2VudFNlc3Npb25zPzogbnVtYmVyO1xufVxuXG4vKipcbiAqIE1lbW9yeSBjbGFzcyBmb3IgbWFuYWdpbmcgQmVkcm9jayBBZ2VudCBtZW1vcnkgY29uZmlndXJhdGlvbnMuIEVuYWJsZXMgY29udmVyc2F0aW9uYWwgY29udGV4dCByZXRlbnRpb25cbiAqIGFjcm9zcyBtdWx0aXBsZSBzZXNzaW9ucyB0aHJvdWdoIHNlc3Npb24gaWRlbnRpZmllcnMuIE1lbW9yeSBjb250ZXh0IGlzIHN0b3JlZCB3aXRoIHVuaXF1ZVxuICogbWVtb3J5IElEcyBwZXIgdXNlciwgYWxsb3dpbmcgYWNjZXNzIHRvIGNvbnZlcnNhdGlvbiBoaXN0b3J5IGFuZCBzdW1tYXJpZXMuIFN1cHBvcnRzIHZpZXdpbmdcbiAqIHN0b3JlZCBzZXNzaW9ucyBhbmQgY2xlYXJpbmcgbWVtb3J5LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2JlZHJvY2svbGF0ZXN0L3VzZXJndWlkZS9hZ2VudHMtbWVtb3J5Lmh0bWxcbiAqL1xuZXhwb3J0IGNsYXNzIE1lbW9yeSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHNlc3Npb24gc3VtbWFyeSBtZW1vcnkgd2l0aCBkZWZhdWx0IGNvbmZpZ3VyYXRpb24uXG4gICAqIEBkZWZhdWx0IG1lbW9yeUR1cmF0aW9uRGF5cz0zMCwgbWF4UmVjZW50U2Vzc2lvbnM9MjBcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU0VTU0lPTl9TVU1NQVJZID0gTWVtb3J5LnNlc3Npb25TdW1tYXJ5KHsgbWVtb3J5RHVyYXRpb25EYXlzOiAzMCwgbWF4UmVjZW50U2Vzc2lvbnM6IDIwIH0pO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgc2Vzc2lvbiBzdW1tYXJ5IG1lbW9yeSB3aXRoIGN1c3RvbSBjb25maWd1cmF0aW9uLlxuICAgKiBAcGFyYW0gcHJvcHMgT3B0aW9uYWwgbWVtb3J5IGNvbmZpZ3VyYXRpb24gcHJvcGVydGllc1xuICAgKiBAcmV0dXJucyBNZW1vcnkgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc2Vzc2lvblN1bW1hcnkocHJvcHM6IFNlc3Npb25TdW1tYXJ5TWVtb3J5UHJvcHMpOiBDZm5BZ2VudC5NZW1vcnlDb25maWd1cmF0aW9uUHJvcGVydHkge1xuICAgIC8vIERvIHNvbWUgY2hlY2tzXG4gICAgdmFsaWRhdGlvbi50aHJvd0lmSW52YWxpZCh0aGlzLnZhbGlkYXRlU2Vzc2lvblN1bW1hcnlNZW1vcnlQcm9wcywgcHJvcHMpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVuYWJsZWRNZW1vcnlUeXBlczogW01lbW9yeVR5cGUuU0VTU0lPTl9TVU1NQVJZXSxcbiAgICAgIHN0b3JhZ2VEYXlzOiBwcm9wcz8ubWVtb3J5RHVyYXRpb25EYXlzID8/IDMwLFxuICAgICAgc2Vzc2lvblN1bW1hcnlDb25maWd1cmF0aW9uOiB7XG4gICAgICAgIG1heFJlY2VudFNlc3Npb25zOiBwcm9wcz8ubWF4UmVjZW50U2Vzc2lvbnMgPz8gMjAsXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGUgYXQgc3ludGggdGltZSB0aGUgY29uZmlndXJhdGlvbi5cbiAgICovXG4gIHByaXZhdGUgc3RhdGljIHZhbGlkYXRlU2Vzc2lvblN1bW1hcnlNZW1vcnlQcm9wcyhwcm9wczogU2Vzc2lvblN1bW1hcnlNZW1vcnlQcm9wcyk6IHN0cmluZ1tdIHtcbiAgICBsZXQgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgLy8gVmFsaWRhdGUgc3RvcmFnZSBkYXlzIGlzIGJldHdlZW4gMCBhbmQgMzY1XG4gICAgaWYgKHByb3BzLm1lbW9yeUR1cmF0aW9uRGF5cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAocHJvcHMubWVtb3J5RHVyYXRpb25EYXlzIDwgMSB8fCBwcm9wcy5tZW1vcnlEdXJhdGlvbkRheXMgPiAzNjUpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goJ21lbW9yeUR1cmF0aW9uRGF5cyBtdXN0IGJlIGJldHdlZW4gMSBhbmQgMzY1Jyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcy5tYXhSZWNlbnRTZXNzaW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAocHJvcHMubWF4UmVjZW50U2Vzc2lvbnMgPCAxKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKCdtYXhSZWNlbnRTZXNzaW9ucyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVycm9ycztcbiAgfVxufVxuIl19